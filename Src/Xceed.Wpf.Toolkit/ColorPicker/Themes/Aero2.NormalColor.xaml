<!--***********************************************************************************

   Toolkit for WPF

   Copyright (C) 2007-2019 Xceed Software Inc.

   This program is provided to you under the terms of the Microsoft Public
   License (Ms-PL) as published at https://github.com/xceedsoftware/wpftoolkit/blob/master/license.md

   For more features, controls, and fast professional support,
   pick up the Plus Edition at https://xceed.com/xceed-toolkit-plus-for-wpf/

   Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids

  **********************************************************************************-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="../../Themes/Aero2/Common.xaml" />
    <ResourceDictionary Source="../../Themes/Aero2/Glyphs.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <conv:InverseBoolConverter x:Key="InverseBoolConverter" />
  <conv:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
  <conv:AdditionConverter x:Key="AdditionConverter" />
  <conv:ColorModeToTabItemSelectedConverter x:Key="ColorModeToTabItemSelectedConverter" />

  <Style x:Key="ColorItemContainerStyle"
         TargetType="{x:Type ListBoxItem}">
    <Setter Property="ToolTip"
            Value="{Binding Name}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid x:Name="mainGrid"
                ToolTip="{Binding Name}">
            <Grid.Resources>
              <Style TargetType="ToolTip">
                <Style.Triggers>
                  <Trigger Property="Content"
                           Value="{x:Static sys:String.Empty}">
                    <Setter Property="Visibility"
                            Value="Collapsed" />
                  </Trigger>
                </Style.Triggers>
              </Style>
            </Grid.Resources>
            <ContentPresenter HorizontalAlignment="Center"
                              VerticalAlignment="Center" />
            <Border BorderThickness="1"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    x:Name="_outerBorder"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
              <Border Background="Transparent"
                      BorderThickness="1"
                      BorderBrush="Transparent"
                      x:Name="_innerBorder"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
              <Setter TargetName="_outerBorder"
                      Property="BorderBrush"
                      Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}" />
              <Setter TargetName="_innerBorder"
                      Property="BorderBrush"
                      Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverBackgroundKey}}" />
            </Trigger>
            <Trigger Property="IsSelected"
                     Value="True">
              <Setter TargetName="_outerBorder"
                      Property="BorderBrush"
                      Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}" />
              <Setter TargetName="_innerBorder"
                      Property="BorderBrush"
                      Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverBackgroundKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource AncestorType={x:Type local:ColorPicker}}}"
                         Value="False">
              <Setter Property="ToolTip"
                      Value="{x:Static sys:String.Empty}"
                      TargetName="mainGrid" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="ColorItemTemplate">
    <Grid>
      <Border Background="{StaticResource CheckerBrush}"
              BorderBrush="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}"
              BorderThickness="1"
              Margin="2,2,2,2">
        <Rectangle Width="14"
                   Height="14">
          <Rectangle.Style>
            <Style TargetType="Rectangle">
              <Setter Property="Fill"
                      Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
            </Style>
          </Rectangle.Style>
        </Rectangle>
      </Border>
    </Grid>
  </DataTemplate>

  <Style x:Key="ColorPickerToggleButtonStyle"
         TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid SnapsToDevicePixels="True">

            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>

              <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Padding="{TemplateBinding Padding}"
                      SnapsToDevicePixels="True">
                <ContentPresenter Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
              </Border>

              <chrome:ButtonChrome x:Name="ToggleButtonChrome"
                                   Grid.Column="1"
                                   CornerRadius="0"
                                   Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                                   RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                                   RenderMouseOver="{TemplateBinding IsMouseOver}"
                                   RenderPressed="{TemplateBinding IsPressed}">

                <Grid x:Name="arrowGlyph"
                      IsHitTestVisible="False"
                      Grid.Column="1"
                      Margin="5">
                  <Path x:Name="Arrow"
                        Width="9"
                        Height="5"
                        Data="{StaticResource DownArrowGeometry}"
                        Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Margin="0,1,0,0" />
                </Grid>
              </chrome:ButtonChrome>
            </Grid>

          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
              <Setter Property="Fill"
                      TargetName="Arrow"
                      Value="#AFAFAF" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ColorDisplayStyle"
         TargetType="ContentControl">
    <Setter Property="Focusable"
            Value="False" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border Background="{StaticResource CheckerBrush}">
            <Rectangle Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
          </Border>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                   Value="{x:Null}">
        <Setter Property="Visibility"
                Value="Collapsed" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ColorListStyle"
         TargetType="ListBox">
    <Setter Property="Background"
            Value="Transparent" />
    <Setter Property="BorderThickness"
            Value="0" />
    <Setter Property="MaxHeight"
            Value="500" />
    <!-- ConverterParameter is margin/Padding from Popup-->
    <Setter Property="Width"
            Value="{Binding MaxDropDownWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ColorPicker}}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Converter={StaticResource AdditionConverter}, ConverterParameter=-4}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle"
            Value="{StaticResource ColorItemContainerStyle}" />
    <Setter Property="ItemTemplate"
            Value="{StaticResource ColorItemTemplate}" />
    <Setter Property="SelectionMode"
            Value="Single" />
  </Style>

  <ControlTemplate x:Key="TabItemTemplate"
                   TargetType="{x:Type local:ColorPickerTabItem}">
    <Grid x:Name="templateRoot"
          SnapsToDevicePixels="true">
      <Border x:Name="mainBorder"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="1,1,1,0"
              Background="{TemplateBinding Background}"
              Margin="0">
        <Border x:Name="innerBorder"
                BorderBrush="#ACACAC"
                BorderThickness="1,1,1,0"
                Background="{TemplateBinding Background}"
                Margin="-1"
                Opacity="0" />
      </Border>
      <ContentPresenter x:Name="contentPresenter"
                        ContentSource="Header"
                        Focusable="False"
                        HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                        Margin="{TemplateBinding Padding}"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                     Value="true" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Panel.ZIndex"
                Value="1" />
        <Setter Property="Margin"
                Value="-2,-2,-2,0" />
        <Setter Property="Opacity"
                TargetName="innerBorder"
                Value="1" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>


  <!-- =============================================================================== -->
  <!-- ColorPicker                                                                     -->
  <!-- =============================================================================== -->

  <Style x:Key="ColorPicker"
         TargetType="{x:Type local:ColorPicker}">
    <Setter Property="Background"
            Value="White" />
    <Setter Property="BorderBrush"
            Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
    <Setter Property="BorderThickness"
            Value="1,1,0,1" />
    <Setter Property="ButtonStyle"
            Value="{StaticResource ColorPickerToggleButtonStyle}" />
    <Setter Property="IsTabStop"
            Value="False" />
    <Setter Property="HorizontalContentAlignment"
            Value="Stretch" />
    <Setter Property="VerticalContentAlignment"
            Value="Center" />
    <Setter Property="MaxDropDownWidth"
            Value="250" />
    <Setter Property="HeaderBackground"
            Value="AliceBlue"/>
    <Setter Property="DropDownBackground"
            Value="{StaticResource PanelBackgroundBrush}"/>
    <Setter Property="TabBackground"
            Value="#FFF0F0F0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ColorPicker}">
          <Grid>
            <ToggleButton x:Name="PART_ColorPickerToggleButton"
                          IsTabStop="True"
                          MinHeight="22"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                          Padding="{TemplateBinding Padding}"
                          IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                          IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                          Style="{TemplateBinding ButtonStyle}">
              <Grid Margin="2">
                <ContentControl x:Name="ColorOnly"
                                Style="{StaticResource ColorDisplayStyle}" />

                <Border x:Name="ColorAndName"
                        Background="White"
                        Visibility="Hidden">
                  <StackPanel Orientation="Horizontal">
                    <ContentControl HorizontalAlignment="Left"
                                    Width="20"
                                    Margin="2,1,4,1"
                                    Style="{StaticResource ColorDisplayStyle}"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
                    <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}"
                               VerticalAlignment="Center">
                    </TextBlock>
                  </StackPanel>
                </Border>
              </Grid>
            </ToggleButton>

            <Popup x:Name="PART_ColorPickerPalettePopup"
                   VerticalAlignment="Bottom"
                   IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}"
                   StaysOpen="False"
                   AllowsTransparency="True"
                   Focusable="False"
                   HorizontalOffset="1"
                   VerticalOffset="1"
                   PopupAnimation="Slide"
                   ToolTip="{x:Static sys:String.Empty}"
                   Width="{TemplateBinding MaxDropDownWidth}">
              <Popup.Resources>
                <Style TargetType="ToolTip">
                  <Style.Triggers>
                    <Trigger Property="Content"
                             Value="{x:Static sys:String.Empty}">
                      <Setter Property="Visibility"
                              Value="Collapsed" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Popup.Resources>
              <Border BorderThickness="1"
                      Background="{TemplateBinding DropDownBackground}"
                      BorderBrush="{StaticResource PopupDarkBorderBrush}"
                      Padding="3">
                <TabControl x:Name="ColorPickerTabControl"
                            Background="Transparent"
                            SelectedIndex="{Binding ColorMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorModeToTabItemSelectedConverter}}">
                  <local:ColorPickerTabItem x:Name="StandardTabItem"
                                            Header="{Binding StandardTabHeader, RelativeSource={RelativeSource TemplatedParent}}"
                                            Background="{TemplateBinding TabBackground}"
                                            Foreground="{TemplateBinding TabForeground}"
                                            Template="{StaticResource TabItemTemplate}">
                    <Grid x:Name="_colorPaletteHost"
                          Margin="4">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>

                      <!-- Available Colors -->
                      <Grid Grid.Row="1"
                            Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                          </Grid.RowDefinitions>
                          <TextBlock Text="{TemplateBinding AvailableColorsHeader}"
                                     Background="{TemplateBinding HeaderBackground}"
                                     Foreground="{TemplateBinding HeaderForeground}"
                                     Padding="2"
                                     Margin="0,0,0,1">
                          </TextBlock>
                          <ListBox x:Name="PART_AvailableColors"
                                   Grid.Row="1"
                                   ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"
                                   Style="{StaticResource ColorListStyle}">
                          </ListBox>
                        </Grid>
                      </Grid>

                      <!-- Standard Colors-->
                      <Grid Grid.Row="2"
                            Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                          </Grid.RowDefinitions>
                          <TextBlock Text="{TemplateBinding StandardColorsHeader}"
                                     Background="{TemplateBinding HeaderBackground}"
                                     Foreground="{TemplateBinding HeaderForeground}"
                                     Padding="2"
                                     Margin="0,1,0,1">
                          </TextBlock>
                          <ListBox x:Name="PART_StandardColors"
                                   Grid.Row="1"
                                   ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"
                                   Style="{StaticResource ColorListStyle}">
                          </ListBox>
                        </Grid>
                      </Grid>

                      <!-- Recent Colors-->
                      <Grid Grid.Row="3"
                            Margin="0,1,0,1"
                            Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="22" />
                          </Grid.RowDefinitions>
                          <TextBlock Text="{TemplateBinding RecentColorsHeader}"
                                     Background="{TemplateBinding HeaderBackground}"
                                     Foreground="{TemplateBinding HeaderForeground}"
                                     Padding="2"
                                     Margin="0,1,0,1">
                          </TextBlock>
                          <ListBox x:Name="PART_RecentColors"
                                   Grid.Row="1"
                                   ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"
                                   Style="{StaticResource ColorListStyle}">
                          </ListBox>
                        </Grid>
                      </Grid>
                    </Grid>
                  </local:ColorPickerTabItem>
                  <local:ColorPickerTabItem x:Name="AdvancedTabItem"
                                            Header="{Binding AdvancedTabHeader, RelativeSource={RelativeSource TemplatedParent}}"
                                            Background="{TemplateBinding TabBackground}"
                                            Foreground="{TemplateBinding TabForeground}"
                                            Template="{StaticResource TabItemTemplate}">
                    <!-- ColorCanvas -->
                    <!-- ConverterParameter is margin/Padding from Popup-->
                    <Grid x:Name="_colorCanvasHost"
                          Width="{Binding MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}">
                      <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                    VerticalScrollBarVisibility="Hidden">
                        <local:ColorCanvas Background="Transparent"
                                           BorderThickness="0"
                                           Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                           UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"
                                           SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" />
                      </ScrollViewer>
                    </Grid>
                  </local:ColorPickerTabItem>
                </TabControl>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="DisplayColorAndName"
                     Value="True">
              <Setter TargetName="ColorOnly"
                      Property="Visibility"
                      Value="Collapsed" />
              <Setter TargetName="ColorAndName"
                      Property="Visibility"
                      Value="Visible" />
            </Trigger>

            <Trigger Property="ShowTabHeaders"
                     Value="False">
              <Setter Property="Visibility"
                      Value="Collapsed"
                      TargetName="StandardTabItem" />
              <Setter Property="Visibility"
                      Value="Collapsed"
                      TargetName="AdvancedTabItem" />
            </Trigger>

            <Trigger Property="ShowDropDownButton"
                     Value="False">
              <Setter Property="BorderThickness"
                      Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="IsMouseOver"
               Value="True">
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static themes:ResourceKeys.ControlMouseOverBorderKey}}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin"
               Value="True">
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type local:ColorPicker}"
         BasedOn="{StaticResource ColorPicker}" />

</ResourceDictionary>
